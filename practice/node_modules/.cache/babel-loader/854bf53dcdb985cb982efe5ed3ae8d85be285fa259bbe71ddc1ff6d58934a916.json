{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yangx\\\\OneDrive\\\\Desktop\\\\School\\\\GitHub\\\\WebVulture\\\\practice\\\\src\\\\context.js\",\n  _s = $RefreshSig$();\n// SliderContext.js\nimport React, { createContext, useState } from 'react';\nimport api from \"./api.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Context = /*#__PURE__*/createContext();\nexport const ContextProvider = ({\n  children\n}) => {\n  _s();\n  // Define state for slider value, button click count, and theme\n  const [sliderValue, setSliderValue] = useState(3);\n\n  // Handlers to update the values\n  const handleSliderChange = (event, newValue) => {\n    setSliderValue(newValue);\n  };\n\n  // Code for checkboxes context\n\n  const [boxChecked, setBoxChecked] = useState(false); // Initial state is false (unchecked)\n\n  const handleBoxChange = event => {\n    setBoxChecked(event.target.checked); // Update the state when the checkbox is clicked\n  };\n  // send button context\n\n  const handleSend = () => {\n    console.log('Button clicked!');\n    api.post('/slider', {\n      value: sliderValue\n    }).then(response => {\n      console.log(\"Slider value updated on backend:\", response.data);\n      setSliderValue(sliderValue); // Update confirmed state locally\n    }).catch(error => {\n      console.error(\"Error updating slider value:\", error);\n    });\n    api.post('/submitted', {\n      clicked: true\n    }).then(response => {\n      console.log(\"Submit state sent to backend:\", response.data);\n    }).catch(error => {\n      console.error(\"Error submitting state:\", error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: {\n      sliderValue,\n      handleSliderChange,\n      boxChecked,\n      handleBoxChange,\n      handleSend\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(ContextProvider, \"dGg8IPUVG7JHstPSAogbDD702DA=\");\n_c = ContextProvider;\nvar _c;\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"names":["React","createContext","useState","api","jsxDEV","_jsxDEV","Context","ContextProvider","children","_s","sliderValue","setSliderValue","handleSliderChange","event","newValue","boxChecked","setBoxChecked","handleBoxChange","target","checked","handleSend","console","log","post","value","then","response","data","catch","error","clicked","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/yangx/OneDrive/Desktop/School/GitHub/WebVulture/practice/src/context.js"],"sourcesContent":["// SliderContext.js\r\nimport React, { createContext, useState } from 'react';\r\nimport api from \"./api.js\";\r\n\r\nexport const Context = createContext();\r\n\r\nexport const ContextProvider = ({ children }) => {\r\n  // Define state for slider value, button click count, and theme\r\n  const [sliderValue, setSliderValue] = useState(3);\r\n\r\n  // Handlers to update the values\r\n  const handleSliderChange = (event, newValue) => {\r\n    setSliderValue(newValue);\r\n  };\r\n\r\n  // Code for checkboxes context\r\n\r\n  const [boxChecked, setBoxChecked] = useState(false); // Initial state is false (unchecked)\r\n  \r\n  const handleBoxChange = (event) => {\r\n      setBoxChecked(event.target.checked); // Update the state when the checkbox is clicked\r\n  }\r\n  // send button context\r\n\r\n  const handleSend= () => {\r\n    console.log('Button clicked!');\r\n\r\n    api.post('/slider', { value: sliderValue })\r\n    .then(response => {\r\n      console.log(\"Slider value updated on backend:\", response.data);\r\n      setSliderValue(sliderValue); // Update confirmed state locally\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error updating slider value:\", error);\r\n    });\r\n\r\n    api.post('/submitted', { clicked: true })\r\n    .then(response => {\r\n      console.log(\"Submit state sent to backend:\", response.data);\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error submitting state:\", error);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Context.Provider\r\n      value={{\r\n        sliderValue,\r\n        handleSliderChange,\r\n        boxChecked,\r\n        handleBoxChange,\r\n        handleSend,\r\n      }}\r\n    >\r\n      {children}\r\n    </Context.Provider>\r\n  );\r\n};\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,QAAQ,OAAO;AACtD,OAAOC,GAAG,MAAM,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3B,OAAO,MAAMC,OAAO,gBAAGL,aAAa,CAAC,CAAC;AAEtC,OAAO,MAAMM,eAAe,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC/C;EACA,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC;;EAEjD;EACA,MAAMU,kBAAkB,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK;IAC9CH,cAAc,CAACG,QAAQ,CAAC;EAC1B,CAAC;;EAED;;EAEA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAErD,MAAMe,eAAe,GAAIJ,KAAK,IAAK;IAC/BG,aAAa,CAACH,KAAK,CAACK,MAAM,CAACC,OAAO,CAAC,CAAC,CAAC;EACzC,CAAC;EACD;;EAEA,MAAMC,UAAU,GAAEA,CAAA,KAAM;IACtBC,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;IAE9BnB,GAAG,CAACoB,IAAI,CAAC,SAAS,EAAE;MAAEC,KAAK,EAAEd;IAAY,CAAC,CAAC,CAC1Ce,IAAI,CAACC,QAAQ,IAAI;MAChBL,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEI,QAAQ,CAACC,IAAI,CAAC;MAC9DhB,cAAc,CAACD,WAAW,CAAC,CAAC,CAAC;IAC/B,CAAC,CAAC,CACDkB,KAAK,CAACC,KAAK,IAAI;MACdR,OAAO,CAACQ,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACtD,CAAC,CAAC;IAEF1B,GAAG,CAACoB,IAAI,CAAC,YAAY,EAAE;MAAEO,OAAO,EAAE;IAAK,CAAC,CAAC,CACxCL,IAAI,CAACC,QAAQ,IAAI;MAChBL,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEI,QAAQ,CAACC,IAAI,CAAC;IAC7D,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;MACdR,OAAO,CAACQ,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IACjD,CAAC,CAAC;EACJ,CAAC;EAED,oBACExB,OAAA,CAACC,OAAO,CAACyB,QAAQ;IACfP,KAAK,EAAE;MACLd,WAAW;MACXE,kBAAkB;MAClBG,UAAU;MACVE,eAAe;MACfG;IACF,CAAE;IAAAZ,QAAA,EAEDA;EAAQ;IAAAwB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACO,CAAC;AAEvB,CAAC;AAAC1B,EAAA,CApDWF,eAAe;AAAA6B,EAAA,GAAf7B,eAAe;AAAA,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}